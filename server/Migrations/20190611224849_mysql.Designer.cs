// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TV_App.EFModels;

namespace TV_App.Migrations
{
    [DbContext(typeof(TvAppContext))]
    [Migration("20190611224849_mysql")]
    partial class mysql
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TV_App.EFModels.Channel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasColumnType("STRING");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("TV_App.EFModels.Description", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content");

                    b.Property<long>("IdProgramme")
                        .HasColumnName("id_programme");

                    b.Property<long?>("Source")
                        .HasColumnName("source");

                    b.HasKey("Id");

                    b.HasIndex("Content")
                        .IsUnique();

                    b.HasIndex("Source");

                    b.HasIndex("IdProgramme", "Source")
                        .IsUnique();

                    b.ToTable("Description");
                });

            modelBuilder.Entity("TV_App.EFModels.Emission", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<long>("ChannelId")
                        .HasColumnName("channel_id");

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnName("start")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Stop")
                        .IsRequired()
                        .HasColumnName("stop")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("ProgrammeId");

                    b.HasIndex("Start", "Stop", "ProgrammeId", "ChannelId")
                        .IsUnique();

                    b.ToTable("Emission");
                });

            modelBuilder.Entity("TV_App.EFModels.Feature", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<long>("Type")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IND_feature_id");

                    b.HasIndex("Type", "Value")
                        .IsUnique();

                    b.ToTable("Feature");
                });

            modelBuilder.Entity("TV_App.EFModels.FeatureExample", b =>
                {
                    b.Property<long>("FeatureId")
                        .HasColumnName("feature_id");

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.HasKey("FeatureId", "ProgrammeId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("FeatureExample");
                });

            modelBuilder.Entity("TV_App.EFModels.FeatureTypes", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("type_name")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");
                });

            modelBuilder.Entity("TV_App.EFModels.GuideUpdate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Posted")
                        .IsRequired()
                        .HasColumnName("posted")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnName("source")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("Posted")
                        .IsUnique();

                    b.ToTable("GuideUpdate");
                });

            modelBuilder.Entity("TV_App.EFModels.Programme", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasColumnType("STRING");

                    b.Property<string>("SeqNumber")
                        .HasColumnName("seq_number")
                        .HasColumnType("STRING");

                    b.Property<long?>("SeriesId")
                        .HasColumnName("series_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IND_programme_id");

                    b.HasIndex("SeriesId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Programme");
                });

            modelBuilder.Entity("TV_App.EFModels.Rating", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnName("user_login")
                        .HasColumnType("STRING");

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.Property<long>("RatingValue")
                        .HasColumnName("rating_value");

                    b.HasKey("UserLogin", "ProgrammeId");

                    b.HasIndex("ProgrammeId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("TV_App.EFModels.Series", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("STRING");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Series");
                });

            modelBuilder.Entity("TV_App.EFModels.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnName("login")
                        .HasColumnType("STRING");

                    b.Property<double>("WeightActor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_actor")
                        .HasColumnType("DOUBLE")
                        .HasDefaultValueSql("0.1");

                    b.Property<double>("WeightCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_category")
                        .HasColumnType("DOUBLE")
                        .HasDefaultValueSql("0.3");

                    b.Property<double>("WeightCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_country")
                        .HasColumnType("DOUBLE")
                        .HasDefaultValueSql("0.1");

                    b.Property<double>("WeightDirector")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_director")
                        .HasColumnType("DOUBLE")
                        .HasDefaultValueSql("0.1");

                    b.Property<double>("WeightKeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_keyword")
                        .HasColumnType("DOUBLE")
                        .HasDefaultValueSql("0.3");

                    b.Property<double>("WeightYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_year")
                        .HasColumnType("DOUBLE")
                        .HasDefaultValueSql("0.1");

                    b.HasKey("Login");

                    b.ToTable("User");
                });

            modelBuilder.Entity("TV_App.EFModels.Description", b =>
                {
                    b.HasOne("TV_App.EFModels.Programme", "IdProgrammeNavigation")
                        .WithMany("Description")
                        .HasForeignKey("IdProgramme");

                    b.HasOne("TV_App.EFModels.GuideUpdate", "SourceNavigation")
                        .WithMany("Description")
                        .HasForeignKey("Source")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("TV_App.EFModels.Emission", b =>
                {
                    b.HasOne("TV_App.EFModels.Channel", "Channel")
                        .WithMany("Emission")
                        .HasForeignKey("ChannelId");

                    b.HasOne("TV_App.EFModels.Programme", "Programme")
                        .WithMany("Emission")
                        .HasForeignKey("ProgrammeId");
                });

            modelBuilder.Entity("TV_App.EFModels.Feature", b =>
                {
                    b.HasOne("TV_App.EFModels.FeatureTypes", "TypeNavigation")
                        .WithMany("Feature")
                        .HasForeignKey("Type");
                });

            modelBuilder.Entity("TV_App.EFModels.FeatureExample", b =>
                {
                    b.HasOne("TV_App.EFModels.Feature", "Feature")
                        .WithMany("FeatureExample")
                        .HasForeignKey("FeatureId");

                    b.HasOne("TV_App.EFModels.Programme", "Programme")
                        .WithMany("FeatureExample")
                        .HasForeignKey("ProgrammeId");
                });

            modelBuilder.Entity("TV_App.EFModels.Programme", b =>
                {
                    b.HasOne("TV_App.EFModels.Series", "Series")
                        .WithMany("Programme")
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("TV_App.EFModels.Rating", b =>
                {
                    b.HasOne("TV_App.EFModels.Programme", "Programme")
                        .WithMany("Rating")
                        .HasForeignKey("ProgrammeId");

                    b.HasOne("TV_App.EFModels.User", "UserLoginNavigation")
                        .WithMany("Rating")
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
