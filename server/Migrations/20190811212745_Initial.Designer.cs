// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TV_App.Models;

namespace TV_App.Migrations
{
    [DbContext(typeof(TvAppContext))]
    [Migration("20190811212745_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview7.19362.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TV_App.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("IX_Channel_name");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("TV_App.Models.Description", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("text");

                    b.Property<long?>("GuideUpdateId")
                        .HasColumnName("guide_update_id");

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.HasKey("Id");

                    b.HasIndex("GuideUpdateId")
                        .HasName("IX_Description_GuideUpdateId");

                    b.HasIndex("ProgrammeId")
                        .HasName("IX_Description_id_programme");

                    b.ToTable("Descriptions");
                });

            modelBuilder.Entity("TV_App.Models.Emission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChannelId")
                        .HasColumnName("channel_id");

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.Property<DateTime>("Start")
                        .HasColumnName("start")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Stop")
                        .HasColumnName("stop")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId")
                        .HasName("IX_Emission_channel_id");

                    b.HasIndex("ProgrammeId")
                        .HasName("IX_Emission_programme_id");

                    b.HasIndex("Start", "Stop", "ProgrammeId", "ChannelId")
                        .IsUnique()
                        .HasName("IX_Emission_start_stop_programme_id_channel_id");

                    b.ToTable("Emissions");
                });

            modelBuilder.Entity("TV_App.Models.Feature", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<long>("Type")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IND_feature_id");

                    b.HasIndex("Type", "Value")
                        .IsUnique()
                        .HasName("IX_Feature_type_value");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("TV_App.Models.FeatureType", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnName("type_name")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("FeatureTypes");
                });

            modelBuilder.Entity("TV_App.Models.GuideUpdate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<DateTime>("Posted")
                        .HasColumnName("posted")
                        .HasColumnType("datetime");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnName("source")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Posted")
                        .IsUnique()
                        .HasName("IX_GuideUpdate_posted");

                    b.ToTable("GuideUpdates");
                });

            modelBuilder.Entity("TV_App.Models.Offer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("TV_App.Models.OfferedChannel", b =>
                {
                    b.Property<long>("OfferId")
                        .HasColumnName("offer_id");

                    b.Property<long>("ChannelId")
                        .HasColumnName("channel_id");

                    b.HasKey("OfferId", "ChannelId");

                    b.HasAlternateKey("ChannelId", "OfferId");

                    b.ToTable("OfferedChannels");
                });

            modelBuilder.Entity("TV_App.Models.Programme", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("IconUrl")
                        .HasColumnName("icon_url")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.Property<string>("SeqNumber")
                        .HasColumnName("seq_number")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long?>("SeriesId")
                        .HasColumnName("series_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(400)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("IND_programme_id");

                    b.HasIndex("SeriesId")
                        .HasName("IX_Programme_series_id");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasName("IX_Programme_title");

                    b.ToTable("Programmes");
                });

            modelBuilder.Entity("TV_App.Models.ProgrammesFeature", b =>
                {
                    b.Property<long>("FeatureId")
                        .HasColumnName("feature_id");

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.HasKey("FeatureId", "ProgrammeId")
                        .HasName("PK_FeatureExample");

                    b.HasIndex("ProgrammeId")
                        .HasName("IX_FeatureExample_programme_id");

                    b.ToTable("ProgrammesFeatures");
                });

            modelBuilder.Entity("TV_App.Models.Rating", b =>
                {
                    b.Property<string>("UserLogin")
                        .HasColumnName("user_login")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<long>("ProgrammeId")
                        .HasColumnName("programme_id");

                    b.Property<long>("RatingValue")
                        .HasColumnName("rating_value");

                    b.HasKey("UserLogin", "ProgrammeId")
                        .HasName("PK_Rating");

                    b.HasIndex("ProgrammeId")
                        .HasName("IX_Rating_programme_id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("TV_App.Models.Series", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasMaxLength(200)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Series");
                });

            modelBuilder.Entity("TV_App.Models.User", b =>
                {
                    b.Property<string>("Login")
                        .HasColumnName("login")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<double>("WeightActor")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_actor")
                        .HasDefaultValueSql("((0.1))");

                    b.Property<double>("WeightCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_category")
                        .HasDefaultValueSql("((0.3))");

                    b.Property<double>("WeightCountry")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_country")
                        .HasDefaultValueSql("((0.1))");

                    b.Property<double>("WeightDirector")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_director")
                        .HasDefaultValueSql("((0.1))");

                    b.Property<double>("WeightKeyword")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_keyword")
                        .HasDefaultValueSql("((0.3))");

                    b.Property<double>("WeightYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("weight_year")
                        .HasDefaultValueSql("((0.1))");

                    b.HasKey("Login")
                        .HasName("PK_User");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TV_App.Models.Description", b =>
                {
                    b.HasOne("TV_App.Models.GuideUpdate", "RelGuideUpdate")
                        .WithMany("Descriptions")
                        .HasForeignKey("GuideUpdateId");

                    b.HasOne("TV_App.Models.Programme", "RelProgramme")
                        .WithMany("Descriptions")
                        .HasForeignKey("ProgrammeId")
                        .IsRequired();
                });

            modelBuilder.Entity("TV_App.Models.Emission", b =>
                {
                    b.HasOne("TV_App.Models.Channel", "ChannelEmitted")
                        .WithMany("Emissions")
                        .HasForeignKey("ChannelId")
                        .IsRequired();

                    b.HasOne("TV_App.Models.Programme", "RelProgramme")
                        .WithMany("Emissions")
                        .HasForeignKey("ProgrammeId")
                        .IsRequired();
                });

            modelBuilder.Entity("TV_App.Models.Feature", b =>
                {
                    b.HasOne("TV_App.Models.FeatureType", "RelType")
                        .WithMany("Features")
                        .HasForeignKey("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("TV_App.Models.OfferedChannel", b =>
                {
                    b.HasOne("TV_App.Models.Channel", "RelChannel")
                        .WithMany("OfferedChannels")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TV_App.Models.Offer", "RelOffer")
                        .WithMany("OfferedChannels")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TV_App.Models.Programme", b =>
                {
                    b.HasOne("TV_App.Models.Series", "RelSeries")
                        .WithMany("Programmes")
                        .HasForeignKey("SeriesId");
                });

            modelBuilder.Entity("TV_App.Models.ProgrammesFeature", b =>
                {
                    b.HasOne("TV_App.Models.Feature", "RelFeature")
                        .WithMany("ProgrammesFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TV_App.Models.Programme", "RelProgramme")
                        .WithMany("ProgrammesFeatures")
                        .HasForeignKey("ProgrammeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TV_App.Models.Rating", b =>
                {
                    b.HasOne("TV_App.Models.Programme", "RelProgramme")
                        .WithMany("Ratings")
                        .HasForeignKey("ProgrammeId")
                        .IsRequired();

                    b.HasOne("TV_App.Models.User", "RelUser")
                        .WithMany("Ratings")
                        .HasForeignKey("UserLogin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
